Description: Fix crash with Xkb extension
Author: Roland Stigge <stigge@antcom.de>

Index: keybinder/libkeybinder/bind.c
===================================================================
--- keybinder.orig/libkeybinder/bind.c	2015-11-07 16:05:53.007356713 -0500
+++ keybinder/libkeybinder/bind.c	2015-11-07 16:07:10.944805805 -0500
@@ -72,6 +72,8 @@
 static GSList *bindings = NULL;
 static guint32 last_event_time = 0;
 static gboolean processing_event = FALSE;
+static gboolean detected_xkb_extension = FALSE;
+static gboolean use_xkb_extension = FALSE;
 
 /* Return the modifier mask that needs to be pressed to produce key in the
  * given group (keyboard layout) and level ("shift level").
@@ -193,13 +195,15 @@
 	GdkKeymap *map;
 	GdkKeymapKey *keys;
 	gint n_keys;
-	GdkModifierType add_modifiers;
-	XkbDescPtr xmap;
+	GdkModifierType add_modifiers = 0;
+	XkbDescPtr xmap = NULL;
 	gboolean success = FALSE;
 
-	xmap = XkbGetMap(GDK_WINDOW_XDISPLAY(rootwin),
-	                 XkbAllClientInfoMask,
-	                 XkbUseCoreKbd);
+	if (use_xkb_extension) {
+		xmap = XkbGetMap(GDK_WINDOW_XDISPLAY(rootwin),
+		                 XkbAllClientInfoMask,
+		                 XkbUseCoreKbd);
+	}
 
 	map = gdk_keymap_get_default();
 	gdk_keymap_get_entries_for_keyval(map, keyval, &keys, &n_keys);
@@ -216,16 +220,24 @@
 			continue;
 		}
 
-		add_modifiers = FinallyGetModifiersForKeycode(xmap,
+
+		TRACE (g_print("grab/ungrab keycode: %d, lev: %d, grp: %d, ",
+			keys[k].keycode, keys[k].level, keys[k].group));
+		if (use_xkb_extension) {
+			add_modifiers = FinallyGetModifiersForKeycode(xmap,
 		                                              keys[k].keycode,
 		                                              keys[k].group,
 		                                              keys[k].level);
+		} else if (keys[k].level > 0) {
+			/* skip shifted/modified keys in non-xkb mode
+			 * this might mean the key can't be bound at all
+			 */
+			continue;
+		}
 
 		if (add_modifiers == MODIFIERS_ERROR) {
 			continue;
 		}
-		TRACE (g_print("grab/ungrab keycode: %d, lev: %d, grp: %d, ",
-			keys[k].keycode, keys[k].level, keys[k].group));
 		TRACE (g_print("modifiers: 0x%x (consumed: 0x%x)\n",
 		               add_modifiers | modifiers, add_modifiers));
 		if (grab_ungrab_with_ignorable_modifiers(rootwin,
@@ -243,7 +255,9 @@
 
 	}
 	g_free(keys);
-	XkbFreeKeyboard(xmap, 0, TRUE);
+	if (xmap) {
+		XkbFreeKeyboard(xmap, 0, TRUE);
+	}
 
 	return success;
 }
@@ -360,7 +374,8 @@
 				xevent->xkey.keycode, 
 				xevent->xkey.state));
 
-		gdk_keymap_translate_keyboard_state(
+		if (use_xkb_extension) {
+			gdk_keymap_translate_keyboard_state(
 				keymap,
 				xevent->xkey.keycode,
 				modifiers,
@@ -369,6 +384,10 @@
 				 */
 				WE_ONLY_USE_ONE_GROUP,
 				&keyval, NULL, NULL, &consumed);
+		} else {
+			consumed = 0;
+			keyval = XLookupKeysym(&xevent->xkey, 0);
+		}
 
 		/* Map non-virtual to virtual modifiers */
 		modifiers &= ~consumed;
@@ -447,6 +466,26 @@
 {
 	GdkKeymap *keymap = gdk_keymap_get_default ();
 	GdkWindow *rootwin = gdk_get_default_root_window ();
+	Display *disp;
+	int xkb_opcode;
+	int xkb_event_base;
+	int xkb_error_base;
+	int majver = XkbMajorVersion;
+	int minver = XkbMinorVersion;
+
+	if (!(disp = XOpenDisplay(NULL))) {
+		g_warning("keybinder_init: Unable to open display");
+		return;
+	}
+
+	detected_xkb_extension = XkbQueryExtension(disp,
+	                                           &xkb_opcode,
+	                                           &xkb_event_base,
+	                                           &xkb_error_base,
+	                                           &majver, &minver);
+
+	use_xkb_extension = detected_xkb_extension;
+	TRACE(g_print("XKB: %d, version: %d, %d\n", use_xkb_extension, majver, minver));
 
 	gdk_window_add_filter (rootwin, filter_func, NULL);
 
@@ -465,6 +504,20 @@
 }
 
 /**
+ * keybinder_set_use_cooked_accelerators: (skip)
+ * @keystring: an accelerator description (gtk_accelerator_parse() format)
+ * @handler:   callback function
+ * @user_data: data to pass to @handler
+ *
+ * Set cooked accelerators.
+ */
+void
+keybinder_set_use_cooked_accelerators (gboolean use_cooked)
+{
+       use_xkb_extension = use_cooked && detected_xkb_extension;
+}
+
+/**
  * keybinder_bind: (skip)
  * @keystring: an accelerator description (gtk_accelerator_parse() format)
  * @handler:   callback function
Index: keybinder/libkeybinder/keybinder.h
===================================================================
--- keybinder.orig/libkeybinder/keybinder.h	2015-11-07 16:05:53.007356713 -0500
+++ keybinder/libkeybinder/keybinder.h	2015-11-07 16:05:52.951355672 -0500
@@ -32,6 +32,8 @@
 
 void keybinder_init (void);
 
+void keybinder_set_use_cooked_accelerators (gboolean use_cooked);
+
 gboolean keybinder_bind (const char *keystring,
                          KeybinderHandler  handler,
                          void *user_data);
